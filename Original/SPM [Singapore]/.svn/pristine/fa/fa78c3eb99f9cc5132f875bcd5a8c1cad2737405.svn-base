//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.5448.
// 
#pragma warning disable 1591

namespace SPMWebApp.SPMSetupService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SPMSetupSoap", Namespace="http://tempuri.org/")]
    public partial class SPMSetup : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback RetrieveCoreClientListOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCoreClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteCoreClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrievePerferListOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePreferListOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePreferListOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPreferenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveAllDealerOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteDealerOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertDealerOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDealerOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveDealerByCriteriaOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveCrossTeamDealerOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrepareForCrossTeamSetupOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertCrossTeamDealerOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteCrossTeamDealerOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCrossTeamDealerOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveClientShortKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertClientShortKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteClientShortKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveAllLeadsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteLeadsOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertLeadsOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveToLeadArchiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback LeadsDataSyncOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateLeadsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveLeadsByCriteriaOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveMaxLeadsIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckExistingLeadOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveExistingLeadsInfoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SPMSetup() {
            this.Url = global::SPMWebApp.Properties.Settings.Default.SPMWebApp_SPMSetupService_SPMSetup;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event RetrieveCoreClientListCompletedEventHandler RetrieveCoreClientListCompleted;
        
        /// <remarks/>
        public event AddCoreClientCompletedEventHandler AddCoreClientCompleted;
        
        /// <remarks/>
        public event DeleteCoreClientCompletedEventHandler DeleteCoreClientCompleted;
        
        /// <remarks/>
        public event RetrievePerferListCompletedEventHandler RetrievePerferListCompleted;
        
        /// <remarks/>
        public event UpdatePreferListCompletedEventHandler UpdatePreferListCompleted;
        
        /// <remarks/>
        public event DeletePreferListCompletedEventHandler DeletePreferListCompleted;
        
        /// <remarks/>
        public event AddPreferenceCompletedEventHandler AddPreferenceCompleted;
        
        /// <remarks/>
        public event RetrieveAllDealerCompletedEventHandler RetrieveAllDealerCompleted;
        
        /// <remarks/>
        public event DeleteDealerCompletedEventHandler DeleteDealerCompleted;
        
        /// <remarks/>
        public event InsertDealerCompletedEventHandler InsertDealerCompleted;
        
        /// <remarks/>
        public event UpdateDealerCompletedEventHandler UpdateDealerCompleted;
        
        /// <remarks/>
        public event RetrieveDealerByCriteriaCompletedEventHandler RetrieveDealerByCriteriaCompleted;
        
        /// <remarks/>
        public event RetrieveCrossTeamDealerCompletedEventHandler RetrieveCrossTeamDealerCompleted;
        
        /// <remarks/>
        public event PrepareForCrossTeamSetupCompletedEventHandler PrepareForCrossTeamSetupCompleted;
        
        /// <remarks/>
        public event InsertCrossTeamDealerCompletedEventHandler InsertCrossTeamDealerCompleted;
        
        /// <remarks/>
        public event DeleteCrossTeamDealerCompletedEventHandler DeleteCrossTeamDealerCompleted;
        
        /// <remarks/>
        public event UpdateCrossTeamDealerCompletedEventHandler UpdateCrossTeamDealerCompleted;
        
        /// <remarks/>
        public event RetrieveClientShortKeyCompletedEventHandler RetrieveClientShortKeyCompleted;
        
        /// <remarks/>
        public event InsertClientShortKeyCompletedEventHandler InsertClientShortKeyCompleted;
        
        /// <remarks/>
        public event DeleteClientShortKeyCompletedEventHandler DeleteClientShortKeyCompleted;
        
        /// <remarks/>
        public event RetrieveAllLeadsCompletedEventHandler RetrieveAllLeadsCompleted;
        
        /// <remarks/>
        public event DeleteLeadsCompletedEventHandler DeleteLeadsCompleted;
        
        /// <remarks/>
        public event InsertLeadsCompletedEventHandler InsertLeadsCompleted;
        
        /// <remarks/>
        public event MoveToLeadArchiveCompletedEventHandler MoveToLeadArchiveCompleted;
        
        /// <remarks/>
        public event LeadsDataSyncCompletedEventHandler LeadsDataSyncCompleted;
        
        /// <remarks/>
        public event UpdateLeadsCompletedEventHandler UpdateLeadsCompleted;
        
        /// <remarks/>
        public event RetrieveLeadsByCriteriaCompletedEventHandler RetrieveLeadsByCriteriaCompleted;
        
        /// <remarks/>
        public event RetrieveMaxLeadsIDCompletedEventHandler RetrieveMaxLeadsIDCompleted;
        
        /// <remarks/>
        public event CheckExistingLeadCompletedEventHandler CheckExistingLeadCompleted;
        
        /// <remarks/>
        public event RetrieveExistingLeadsInfoCompletedEventHandler RetrieveExistingLeadsInfoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveCoreClientList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RetrieveCoreClientList(string AECode, string AccNo, string dbConnStr) {
            object[] results = this.Invoke("RetrieveCoreClientList", new object[] {
                        AECode,
                        AccNo,
                        dbConnStr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveCoreClientListAsync(string AECode, string AccNo, string dbConnStr) {
            this.RetrieveCoreClientListAsync(AECode, AccNo, dbConnStr, null);
        }
        
        /// <remarks/>
        public void RetrieveCoreClientListAsync(string AECode, string AccNo, string dbConnStr, object userState) {
            if ((this.RetrieveCoreClientListOperationCompleted == null)) {
                this.RetrieveCoreClientListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveCoreClientListOperationCompleted);
            }
            this.InvokeAsync("RetrieveCoreClientList", new object[] {
                        AECode,
                        AccNo,
                        dbConnStr}, this.RetrieveCoreClientListOperationCompleted, userState);
        }
        
        private void OnRetrieveCoreClientListOperationCompleted(object arg) {
            if ((this.RetrieveCoreClientListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveCoreClientListCompleted(this, new RetrieveCoreClientListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddCoreClient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet AddCoreClient(string AECode, string AccNo, string userId, string dbConnStr) {
            object[] results = this.Invoke("AddCoreClient", new object[] {
                        AECode,
                        AccNo,
                        userId,
                        dbConnStr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AddCoreClientAsync(string AECode, string AccNo, string userId, string dbConnStr) {
            this.AddCoreClientAsync(AECode, AccNo, userId, dbConnStr, null);
        }
        
        /// <remarks/>
        public void AddCoreClientAsync(string AECode, string AccNo, string userId, string dbConnStr, object userState) {
            if ((this.AddCoreClientOperationCompleted == null)) {
                this.AddCoreClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCoreClientOperationCompleted);
            }
            this.InvokeAsync("AddCoreClient", new object[] {
                        AECode,
                        AccNo,
                        userId,
                        dbConnStr}, this.AddCoreClientOperationCompleted, userState);
        }
        
        private void OnAddCoreClientOperationCompleted(object arg) {
            if ((this.AddCoreClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCoreClientCompleted(this, new AddCoreClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteCoreClient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] DeleteCoreClient(long recId, string dbConnStr) {
            object[] results = this.Invoke("DeleteCoreClient", new object[] {
                        recId,
                        dbConnStr});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void DeleteCoreClientAsync(long recId, string dbConnStr) {
            this.DeleteCoreClientAsync(recId, dbConnStr, null);
        }
        
        /// <remarks/>
        public void DeleteCoreClientAsync(long recId, string dbConnStr, object userState) {
            if ((this.DeleteCoreClientOperationCompleted == null)) {
                this.DeleteCoreClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCoreClientOperationCompleted);
            }
            this.InvokeAsync("DeleteCoreClient", new object[] {
                        recId,
                        dbConnStr}, this.DeleteCoreClientOperationCompleted, userState);
        }
        
        private void OnDeleteCoreClientOperationCompleted(object arg) {
            if ((this.DeleteCoreClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCoreClientCompleted(this, new DeleteCoreClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrievePerferList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RetrievePerferList(string optionNo, string optionContent, string dbConnStr) {
            object[] results = this.Invoke("RetrievePerferList", new object[] {
                        optionNo,
                        optionContent,
                        dbConnStr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RetrievePerferListAsync(string optionNo, string optionContent, string dbConnStr) {
            this.RetrievePerferListAsync(optionNo, optionContent, dbConnStr, null);
        }
        
        /// <remarks/>
        public void RetrievePerferListAsync(string optionNo, string optionContent, string dbConnStr, object userState) {
            if ((this.RetrievePerferListOperationCompleted == null)) {
                this.RetrievePerferListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrievePerferListOperationCompleted);
            }
            this.InvokeAsync("RetrievePerferList", new object[] {
                        optionNo,
                        optionContent,
                        dbConnStr}, this.RetrievePerferListOperationCompleted, userState);
        }
        
        private void OnRetrievePerferListOperationCompleted(object arg) {
            if ((this.RetrievePerferListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrievePerferListCompleted(this, new RetrievePerferListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePreferList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] UpdatePreferList(long recId, string optionNo, string optionContent, string dbConnStr) {
            object[] results = this.Invoke("UpdatePreferList", new object[] {
                        recId,
                        optionNo,
                        optionContent,
                        dbConnStr});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePreferListAsync(long recId, string optionNo, string optionContent, string dbConnStr) {
            this.UpdatePreferListAsync(recId, optionNo, optionContent, dbConnStr, null);
        }
        
        /// <remarks/>
        public void UpdatePreferListAsync(long recId, string optionNo, string optionContent, string dbConnStr, object userState) {
            if ((this.UpdatePreferListOperationCompleted == null)) {
                this.UpdatePreferListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePreferListOperationCompleted);
            }
            this.InvokeAsync("UpdatePreferList", new object[] {
                        recId,
                        optionNo,
                        optionContent,
                        dbConnStr}, this.UpdatePreferListOperationCompleted, userState);
        }
        
        private void OnUpdatePreferListOperationCompleted(object arg) {
            if ((this.UpdatePreferListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePreferListCompleted(this, new UpdatePreferListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeletePreferList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] DeletePreferList(long recId, string dbConnStr) {
            object[] results = this.Invoke("DeletePreferList", new object[] {
                        recId,
                        dbConnStr});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void DeletePreferListAsync(long recId, string dbConnStr) {
            this.DeletePreferListAsync(recId, dbConnStr, null);
        }
        
        /// <remarks/>
        public void DeletePreferListAsync(long recId, string dbConnStr, object userState) {
            if ((this.DeletePreferListOperationCompleted == null)) {
                this.DeletePreferListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePreferListOperationCompleted);
            }
            this.InvokeAsync("DeletePreferList", new object[] {
                        recId,
                        dbConnStr}, this.DeletePreferListOperationCompleted, userState);
        }
        
        private void OnDeletePreferListOperationCompleted(object arg) {
            if ((this.DeletePreferListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePreferListCompleted(this, new DeletePreferListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddPreference", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet AddPreference(string userId, string optionNo, string optionContent, string dbConnStr) {
            object[] results = this.Invoke("AddPreference", new object[] {
                        userId,
                        optionNo,
                        optionContent,
                        dbConnStr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AddPreferenceAsync(string userId, string optionNo, string optionContent, string dbConnStr) {
            this.AddPreferenceAsync(userId, optionNo, optionContent, dbConnStr, null);
        }
        
        /// <remarks/>
        public void AddPreferenceAsync(string userId, string optionNo, string optionContent, string dbConnStr, object userState) {
            if ((this.AddPreferenceOperationCompleted == null)) {
                this.AddPreferenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPreferenceOperationCompleted);
            }
            this.InvokeAsync("AddPreference", new object[] {
                        userId,
                        optionNo,
                        optionContent,
                        dbConnStr}, this.AddPreferenceOperationCompleted, userState);
        }
        
        private void OnAddPreferenceOperationCompleted(object arg) {
            if ((this.AddPreferenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPreferenceCompleted(this, new AddPreferenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveAllDealer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RetrieveAllDealer(string dbConnStr) {
            object[] results = this.Invoke("RetrieveAllDealer", new object[] {
                        dbConnStr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveAllDealerAsync(string dbConnStr) {
            this.RetrieveAllDealerAsync(dbConnStr, null);
        }
        
        /// <remarks/>
        public void RetrieveAllDealerAsync(string dbConnStr, object userState) {
            if ((this.RetrieveAllDealerOperationCompleted == null)) {
                this.RetrieveAllDealerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAllDealerOperationCompleted);
            }
            this.InvokeAsync("RetrieveAllDealer", new object[] {
                        dbConnStr}, this.RetrieveAllDealerOperationCompleted, userState);
        }
        
        private void OnRetrieveAllDealerOperationCompleted(object arg) {
            if ((this.RetrieveAllDealerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAllDealerCompleted(this, new RetrieveAllDealerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteDealer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] DeleteDealer(long recId, string dbConnStr) {
            object[] results = this.Invoke("DeleteDealer", new object[] {
                        recId,
                        dbConnStr});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void DeleteDealerAsync(long recId, string dbConnStr) {
            this.DeleteDealerAsync(recId, dbConnStr, null);
        }
        
        /// <remarks/>
        public void DeleteDealerAsync(long recId, string dbConnStr, object userState) {
            if ((this.DeleteDealerOperationCompleted == null)) {
                this.DeleteDealerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDealerOperationCompleted);
            }
            this.InvokeAsync("DeleteDealer", new object[] {
                        recId,
                        dbConnStr}, this.DeleteDealerOperationCompleted, userState);
        }
        
        private void OnDeleteDealerOperationCompleted(object arg) {
            if ((this.DeleteDealerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteDealerCompleted(this, new DeleteDealerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertDealer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] InsertDealer(string emailID, string dealerCode, string dealerName, string teamCode, string atsLogin, int enable, string crossGroup, string supervisior, string modifiedUser, string dealerEmailID, string altAECode, string dbConnectionStr) {
            object[] results = this.Invoke("InsertDealer", new object[] {
                        emailID,
                        dealerCode,
                        dealerName,
                        teamCode,
                        atsLogin,
                        enable,
                        crossGroup,
                        supervisior,
                        modifiedUser,
                        dealerEmailID,
                        altAECode,
                        dbConnectionStr});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void InsertDealerAsync(string emailID, string dealerCode, string dealerName, string teamCode, string atsLogin, int enable, string crossGroup, string supervisior, string modifiedUser, string dealerEmailID, string altAECode, string dbConnectionStr) {
            this.InsertDealerAsync(emailID, dealerCode, dealerName, teamCode, atsLogin, enable, crossGroup, supervisior, modifiedUser, dealerEmailID, altAECode, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void InsertDealerAsync(string emailID, string dealerCode, string dealerName, string teamCode, string atsLogin, int enable, string crossGroup, string supervisior, string modifiedUser, string dealerEmailID, string altAECode, string dbConnectionStr, object userState) {
            if ((this.InsertDealerOperationCompleted == null)) {
                this.InsertDealerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertDealerOperationCompleted);
            }
            this.InvokeAsync("InsertDealer", new object[] {
                        emailID,
                        dealerCode,
                        dealerName,
                        teamCode,
                        atsLogin,
                        enable,
                        crossGroup,
                        supervisior,
                        modifiedUser,
                        dealerEmailID,
                        altAECode,
                        dbConnectionStr}, this.InsertDealerOperationCompleted, userState);
        }
        
        private void OnInsertDealerOperationCompleted(object arg) {
            if ((this.InsertDealerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertDealerCompleted(this, new InsertDealerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateDealer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] UpdateDealer(string recId, string emailID, string dealerCode, string dealerName, string teamCode, string atsLogin, int enable, string crossGroup, string supervisior, string modifiedUser, string originalDealerCode, string originalUserId, string dealerEmailID, string altAECode, string dbConnectionStr) {
            object[] results = this.Invoke("UpdateDealer", new object[] {
                        recId,
                        emailID,
                        dealerCode,
                        dealerName,
                        teamCode,
                        atsLogin,
                        enable,
                        crossGroup,
                        supervisior,
                        modifiedUser,
                        originalDealerCode,
                        originalUserId,
                        dealerEmailID,
                        altAECode,
                        dbConnectionStr});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void UpdateDealerAsync(string recId, string emailID, string dealerCode, string dealerName, string teamCode, string atsLogin, int enable, string crossGroup, string supervisior, string modifiedUser, string originalDealerCode, string originalUserId, string dealerEmailID, string altAECode, string dbConnectionStr) {
            this.UpdateDealerAsync(recId, emailID, dealerCode, dealerName, teamCode, atsLogin, enable, crossGroup, supervisior, modifiedUser, originalDealerCode, originalUserId, dealerEmailID, altAECode, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void UpdateDealerAsync(
                    string recId, 
                    string emailID, 
                    string dealerCode, 
                    string dealerName, 
                    string teamCode, 
                    string atsLogin, 
                    int enable, 
                    string crossGroup, 
                    string supervisior, 
                    string modifiedUser, 
                    string originalDealerCode, 
                    string originalUserId, 
                    string dealerEmailID, 
                    string altAECode, 
                    string dbConnectionStr, 
                    object userState) {
            if ((this.UpdateDealerOperationCompleted == null)) {
                this.UpdateDealerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDealerOperationCompleted);
            }
            this.InvokeAsync("UpdateDealer", new object[] {
                        recId,
                        emailID,
                        dealerCode,
                        dealerName,
                        teamCode,
                        atsLogin,
                        enable,
                        crossGroup,
                        supervisior,
                        modifiedUser,
                        originalDealerCode,
                        originalUserId,
                        dealerEmailID,
                        altAECode,
                        dbConnectionStr}, this.UpdateDealerOperationCompleted, userState);
        }
        
        private void OnUpdateDealerOperationCompleted(object arg) {
            if ((this.UpdateDealerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDealerCompleted(this, new UpdateDealerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveDealerByCriteria", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RetrieveDealerByCriteria(string emailID, string dealerCode, string dealerName, string teamCode, string atsLogin, int enable, string crossGroup, string supervisior, string dealerEmailID, string UserID, string dbConnectionStr) {
            object[] results = this.Invoke("RetrieveDealerByCriteria", new object[] {
                        emailID,
                        dealerCode,
                        dealerName,
                        teamCode,
                        atsLogin,
                        enable,
                        crossGroup,
                        supervisior,
                        dealerEmailID,
                        UserID,
                        dbConnectionStr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveDealerByCriteriaAsync(string emailID, string dealerCode, string dealerName, string teamCode, string atsLogin, int enable, string crossGroup, string supervisior, string dealerEmailID, string UserID, string dbConnectionStr) {
            this.RetrieveDealerByCriteriaAsync(emailID, dealerCode, dealerName, teamCode, atsLogin, enable, crossGroup, supervisior, dealerEmailID, UserID, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void RetrieveDealerByCriteriaAsync(string emailID, string dealerCode, string dealerName, string teamCode, string atsLogin, int enable, string crossGroup, string supervisior, string dealerEmailID, string UserID, string dbConnectionStr, object userState) {
            if ((this.RetrieveDealerByCriteriaOperationCompleted == null)) {
                this.RetrieveDealerByCriteriaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveDealerByCriteriaOperationCompleted);
            }
            this.InvokeAsync("RetrieveDealerByCriteria", new object[] {
                        emailID,
                        dealerCode,
                        dealerName,
                        teamCode,
                        atsLogin,
                        enable,
                        crossGroup,
                        supervisior,
                        dealerEmailID,
                        UserID,
                        dbConnectionStr}, this.RetrieveDealerByCriteriaOperationCompleted, userState);
        }
        
        private void OnRetrieveDealerByCriteriaOperationCompleted(object arg) {
            if ((this.RetrieveDealerByCriteriaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveDealerByCriteriaCompleted(this, new RetrieveDealerByCriteriaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveCrossTeamDealer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RetrieveCrossTeamDealer(string dealerCode, string dealerTeam, string crossTeam, string dbConnectionStr) {
            object[] results = this.Invoke("RetrieveCrossTeamDealer", new object[] {
                        dealerCode,
                        dealerTeam,
                        crossTeam,
                        dbConnectionStr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveCrossTeamDealerAsync(string dealerCode, string dealerTeam, string crossTeam, string dbConnectionStr) {
            this.RetrieveCrossTeamDealerAsync(dealerCode, dealerTeam, crossTeam, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void RetrieveCrossTeamDealerAsync(string dealerCode, string dealerTeam, string crossTeam, string dbConnectionStr, object userState) {
            if ((this.RetrieveCrossTeamDealerOperationCompleted == null)) {
                this.RetrieveCrossTeamDealerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveCrossTeamDealerOperationCompleted);
            }
            this.InvokeAsync("RetrieveCrossTeamDealer", new object[] {
                        dealerCode,
                        dealerTeam,
                        crossTeam,
                        dbConnectionStr}, this.RetrieveCrossTeamDealerOperationCompleted, userState);
        }
        
        private void OnRetrieveCrossTeamDealerOperationCompleted(object arg) {
            if ((this.RetrieveCrossTeamDealerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveCrossTeamDealerCompleted(this, new RetrieveCrossTeamDealerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PrepareForCrossTeamSetup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PrepareForCrossTeamSetup(string dbConnectionStr) {
            object[] results = this.Invoke("PrepareForCrossTeamSetup", new object[] {
                        dbConnectionStr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PrepareForCrossTeamSetupAsync(string dbConnectionStr) {
            this.PrepareForCrossTeamSetupAsync(dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void PrepareForCrossTeamSetupAsync(string dbConnectionStr, object userState) {
            if ((this.PrepareForCrossTeamSetupOperationCompleted == null)) {
                this.PrepareForCrossTeamSetupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrepareForCrossTeamSetupOperationCompleted);
            }
            this.InvokeAsync("PrepareForCrossTeamSetup", new object[] {
                        dbConnectionStr}, this.PrepareForCrossTeamSetupOperationCompleted, userState);
        }
        
        private void OnPrepareForCrossTeamSetupOperationCompleted(object arg) {
            if ((this.PrepareForCrossTeamSetupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrepareForCrossTeamSetupCompleted(this, new PrepareForCrossTeamSetupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertCrossTeamDealer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] InsertCrossTeamDealer(string dealerCode, string crossTeam, string modifiedUser, string dbConnectionStr) {
            object[] results = this.Invoke("InsertCrossTeamDealer", new object[] {
                        dealerCode,
                        crossTeam,
                        modifiedUser,
                        dbConnectionStr});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void InsertCrossTeamDealerAsync(string dealerCode, string crossTeam, string modifiedUser, string dbConnectionStr) {
            this.InsertCrossTeamDealerAsync(dealerCode, crossTeam, modifiedUser, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void InsertCrossTeamDealerAsync(string dealerCode, string crossTeam, string modifiedUser, string dbConnectionStr, object userState) {
            if ((this.InsertCrossTeamDealerOperationCompleted == null)) {
                this.InsertCrossTeamDealerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertCrossTeamDealerOperationCompleted);
            }
            this.InvokeAsync("InsertCrossTeamDealer", new object[] {
                        dealerCode,
                        crossTeam,
                        modifiedUser,
                        dbConnectionStr}, this.InsertCrossTeamDealerOperationCompleted, userState);
        }
        
        private void OnInsertCrossTeamDealerOperationCompleted(object arg) {
            if ((this.InsertCrossTeamDealerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertCrossTeamDealerCompleted(this, new InsertCrossTeamDealerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteCrossTeamDealer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] DeleteCrossTeamDealer(string dealerCode, string dbConnectionStr) {
            object[] results = this.Invoke("DeleteCrossTeamDealer", new object[] {
                        dealerCode,
                        dbConnectionStr});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void DeleteCrossTeamDealerAsync(string dealerCode, string dbConnectionStr) {
            this.DeleteCrossTeamDealerAsync(dealerCode, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void DeleteCrossTeamDealerAsync(string dealerCode, string dbConnectionStr, object userState) {
            if ((this.DeleteCrossTeamDealerOperationCompleted == null)) {
                this.DeleteCrossTeamDealerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCrossTeamDealerOperationCompleted);
            }
            this.InvokeAsync("DeleteCrossTeamDealer", new object[] {
                        dealerCode,
                        dbConnectionStr}, this.DeleteCrossTeamDealerOperationCompleted, userState);
        }
        
        private void OnDeleteCrossTeamDealerOperationCompleted(object arg) {
            if ((this.DeleteCrossTeamDealerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCrossTeamDealerCompleted(this, new DeleteCrossTeamDealerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCrossTeamDealer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] UpdateCrossTeamDealer(string dealerCode, string crossTeam, string modifiedUser, string dbConnectionStr) {
            object[] results = this.Invoke("UpdateCrossTeamDealer", new object[] {
                        dealerCode,
                        crossTeam,
                        modifiedUser,
                        dbConnectionStr});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void UpdateCrossTeamDealerAsync(string dealerCode, string crossTeam, string modifiedUser, string dbConnectionStr) {
            this.UpdateCrossTeamDealerAsync(dealerCode, crossTeam, modifiedUser, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void UpdateCrossTeamDealerAsync(string dealerCode, string crossTeam, string modifiedUser, string dbConnectionStr, object userState) {
            if ((this.UpdateCrossTeamDealerOperationCompleted == null)) {
                this.UpdateCrossTeamDealerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCrossTeamDealerOperationCompleted);
            }
            this.InvokeAsync("UpdateCrossTeamDealer", new object[] {
                        dealerCode,
                        crossTeam,
                        modifiedUser,
                        dbConnectionStr}, this.UpdateCrossTeamDealerOperationCompleted, userState);
        }
        
        private void OnUpdateCrossTeamDealerOperationCompleted(object arg) {
            if ((this.UpdateCrossTeamDealerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCrossTeamDealerCompleted(this, new UpdateCrossTeamDealerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveClientShortKey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RetrieveClientShortKey(string accountNo, string shortKey, string dbConnectionStr) {
            object[] results = this.Invoke("RetrieveClientShortKey", new object[] {
                        accountNo,
                        shortKey,
                        dbConnectionStr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveClientShortKeyAsync(string accountNo, string shortKey, string dbConnectionStr) {
            this.RetrieveClientShortKeyAsync(accountNo, shortKey, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void RetrieveClientShortKeyAsync(string accountNo, string shortKey, string dbConnectionStr, object userState) {
            if ((this.RetrieveClientShortKeyOperationCompleted == null)) {
                this.RetrieveClientShortKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveClientShortKeyOperationCompleted);
            }
            this.InvokeAsync("RetrieveClientShortKey", new object[] {
                        accountNo,
                        shortKey,
                        dbConnectionStr}, this.RetrieveClientShortKeyOperationCompleted, userState);
        }
        
        private void OnRetrieveClientShortKeyOperationCompleted(object arg) {
            if ((this.RetrieveClientShortKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveClientShortKeyCompleted(this, new RetrieveClientShortKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertClientShortKey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] InsertClientShortKey(string userId, string accountNo, string shortKey, string dbConnectionStr) {
            object[] results = this.Invoke("InsertClientShortKey", new object[] {
                        userId,
                        accountNo,
                        shortKey,
                        dbConnectionStr});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void InsertClientShortKeyAsync(string userId, string accountNo, string shortKey, string dbConnectionStr) {
            this.InsertClientShortKeyAsync(userId, accountNo, shortKey, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void InsertClientShortKeyAsync(string userId, string accountNo, string shortKey, string dbConnectionStr, object userState) {
            if ((this.InsertClientShortKeyOperationCompleted == null)) {
                this.InsertClientShortKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertClientShortKeyOperationCompleted);
            }
            this.InvokeAsync("InsertClientShortKey", new object[] {
                        userId,
                        accountNo,
                        shortKey,
                        dbConnectionStr}, this.InsertClientShortKeyOperationCompleted, userState);
        }
        
        private void OnInsertClientShortKeyOperationCompleted(object arg) {
            if ((this.InsertClientShortKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertClientShortKeyCompleted(this, new InsertClientShortKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteClientShortKey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] DeleteClientShortKey(string accountNo, string dbConnectionStr) {
            object[] results = this.Invoke("DeleteClientShortKey", new object[] {
                        accountNo,
                        dbConnectionStr});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void DeleteClientShortKeyAsync(string accountNo, string dbConnectionStr) {
            this.DeleteClientShortKeyAsync(accountNo, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void DeleteClientShortKeyAsync(string accountNo, string dbConnectionStr, object userState) {
            if ((this.DeleteClientShortKeyOperationCompleted == null)) {
                this.DeleteClientShortKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteClientShortKeyOperationCompleted);
            }
            this.InvokeAsync("DeleteClientShortKey", new object[] {
                        accountNo,
                        dbConnectionStr}, this.DeleteClientShortKeyOperationCompleted, userState);
        }
        
        private void OnDeleteClientShortKeyOperationCompleted(object arg) {
            if ((this.DeleteClientShortKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteClientShortKeyCompleted(this, new DeleteClientShortKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveAllLeads", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RetrieveAllLeads(string dbConnStr) {
            object[] results = this.Invoke("RetrieveAllLeads", new object[] {
                        dbConnStr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveAllLeadsAsync(string dbConnStr) {
            this.RetrieveAllLeadsAsync(dbConnStr, null);
        }
        
        /// <remarks/>
        public void RetrieveAllLeadsAsync(string dbConnStr, object userState) {
            if ((this.RetrieveAllLeadsOperationCompleted == null)) {
                this.RetrieveAllLeadsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAllLeadsOperationCompleted);
            }
            this.InvokeAsync("RetrieveAllLeads", new object[] {
                        dbConnStr}, this.RetrieveAllLeadsOperationCompleted, userState);
        }
        
        private void OnRetrieveAllLeadsOperationCompleted(object arg) {
            if ((this.RetrieveAllLeadsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAllLeadsCompleted(this, new RetrieveAllLeadsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteLeads", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet DeleteLeads(string leadId, string dealerCode, string dbConnStr) {
            object[] results = this.Invoke("DeleteLeads", new object[] {
                        leadId,
                        dealerCode,
                        dbConnStr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteLeadsAsync(string leadId, string dealerCode, string dbConnStr) {
            this.DeleteLeadsAsync(leadId, dealerCode, dbConnStr, null);
        }
        
        /// <remarks/>
        public void DeleteLeadsAsync(string leadId, string dealerCode, string dbConnStr, object userState) {
            if ((this.DeleteLeadsOperationCompleted == null)) {
                this.DeleteLeadsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteLeadsOperationCompleted);
            }
            this.InvokeAsync("DeleteLeads", new object[] {
                        leadId,
                        dealerCode,
                        dbConnStr}, this.DeleteLeadsOperationCompleted, userState);
        }
        
        private void OnDeleteLeadsOperationCompleted(object arg) {
            if ((this.DeleteLeadsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteLeadsCompleted(this, new DeleteLeadsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertLeads", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] InsertLeads(string LeadID, string LeadName, string LeadNRIC, string LeadMobile, string LeadHome, string LeadGender, string LeadEmail, string LeadEvent, string teamCode, string dealerCode, string inputType, string dbConnectionStr) {
            object[] results = this.Invoke("InsertLeads", new object[] {
                        LeadID,
                        LeadName,
                        LeadNRIC,
                        LeadMobile,
                        LeadHome,
                        LeadGender,
                        LeadEmail,
                        LeadEvent,
                        teamCode,
                        dealerCode,
                        inputType,
                        dbConnectionStr});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void InsertLeadsAsync(string LeadID, string LeadName, string LeadNRIC, string LeadMobile, string LeadHome, string LeadGender, string LeadEmail, string LeadEvent, string teamCode, string dealerCode, string inputType, string dbConnectionStr) {
            this.InsertLeadsAsync(LeadID, LeadName, LeadNRIC, LeadMobile, LeadHome, LeadGender, LeadEmail, LeadEvent, teamCode, dealerCode, inputType, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void InsertLeadsAsync(string LeadID, string LeadName, string LeadNRIC, string LeadMobile, string LeadHome, string LeadGender, string LeadEmail, string LeadEvent, string teamCode, string dealerCode, string inputType, string dbConnectionStr, object userState) {
            if ((this.InsertLeadsOperationCompleted == null)) {
                this.InsertLeadsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertLeadsOperationCompleted);
            }
            this.InvokeAsync("InsertLeads", new object[] {
                        LeadID,
                        LeadName,
                        LeadNRIC,
                        LeadMobile,
                        LeadHome,
                        LeadGender,
                        LeadEmail,
                        LeadEvent,
                        teamCode,
                        dealerCode,
                        inputType,
                        dbConnectionStr}, this.InsertLeadsOperationCompleted, userState);
        }
        
        private void OnInsertLeadsOperationCompleted(object arg) {
            if ((this.InsertLeadsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertLeadsCompleted(this, new InsertLeadsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MoveToLeadArchive", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] MoveToLeadArchive(string syncType, string strCondition, string dbConnectionStr) {
            object[] results = this.Invoke("MoveToLeadArchive", new object[] {
                        syncType,
                        strCondition,
                        dbConnectionStr});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void MoveToLeadArchiveAsync(string syncType, string strCondition, string dbConnectionStr) {
            this.MoveToLeadArchiveAsync(syncType, strCondition, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void MoveToLeadArchiveAsync(string syncType, string strCondition, string dbConnectionStr, object userState) {
            if ((this.MoveToLeadArchiveOperationCompleted == null)) {
                this.MoveToLeadArchiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveToLeadArchiveOperationCompleted);
            }
            this.InvokeAsync("MoveToLeadArchive", new object[] {
                        syncType,
                        strCondition,
                        dbConnectionStr}, this.MoveToLeadArchiveOperationCompleted, userState);
        }
        
        private void OnMoveToLeadArchiveOperationCompleted(object arg) {
            if ((this.MoveToLeadArchiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveToLeadArchiveCompleted(this, new MoveToLeadArchiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LeadsDataSync", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] LeadsDataSync(string syncType, string strCondition, string dbConnectionStr) {
            object[] results = this.Invoke("LeadsDataSync", new object[] {
                        syncType,
                        strCondition,
                        dbConnectionStr});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void LeadsDataSyncAsync(string syncType, string strCondition, string dbConnectionStr) {
            this.LeadsDataSyncAsync(syncType, strCondition, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void LeadsDataSyncAsync(string syncType, string strCondition, string dbConnectionStr, object userState) {
            if ((this.LeadsDataSyncOperationCompleted == null)) {
                this.LeadsDataSyncOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLeadsDataSyncOperationCompleted);
            }
            this.InvokeAsync("LeadsDataSync", new object[] {
                        syncType,
                        strCondition,
                        dbConnectionStr}, this.LeadsDataSyncOperationCompleted, userState);
        }
        
        private void OnLeadsDataSyncOperationCompleted(object arg) {
            if ((this.LeadsDataSyncCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LeadsDataSyncCompleted(this, new LeadsDataSyncCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateLeads", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] UpdateLeads(string LeadID, string LeadName, string LeadNRIC, string LeadMobile, string LeadHome, string LeadGender, string LeadEmail, string LeadEvent, string teamCode, string dealerCode, string dbConnectionStr) {
            object[] results = this.Invoke("UpdateLeads", new object[] {
                        LeadID,
                        LeadName,
                        LeadNRIC,
                        LeadMobile,
                        LeadHome,
                        LeadGender,
                        LeadEmail,
                        LeadEvent,
                        teamCode,
                        dealerCode,
                        dbConnectionStr});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void UpdateLeadsAsync(string LeadID, string LeadName, string LeadNRIC, string LeadMobile, string LeadHome, string LeadGender, string LeadEmail, string LeadEvent, string teamCode, string dealerCode, string dbConnectionStr) {
            this.UpdateLeadsAsync(LeadID, LeadName, LeadNRIC, LeadMobile, LeadHome, LeadGender, LeadEmail, LeadEvent, teamCode, dealerCode, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void UpdateLeadsAsync(string LeadID, string LeadName, string LeadNRIC, string LeadMobile, string LeadHome, string LeadGender, string LeadEmail, string LeadEvent, string teamCode, string dealerCode, string dbConnectionStr, object userState) {
            if ((this.UpdateLeadsOperationCompleted == null)) {
                this.UpdateLeadsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateLeadsOperationCompleted);
            }
            this.InvokeAsync("UpdateLeads", new object[] {
                        LeadID,
                        LeadName,
                        LeadNRIC,
                        LeadMobile,
                        LeadHome,
                        LeadGender,
                        LeadEmail,
                        LeadEvent,
                        teamCode,
                        dealerCode,
                        dbConnectionStr}, this.UpdateLeadsOperationCompleted, userState);
        }
        
        private void OnUpdateLeadsOperationCompleted(object arg) {
            if ((this.UpdateLeadsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateLeadsCompleted(this, new UpdateLeadsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveLeadsByCriteria", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RetrieveLeadsByCriteria(string leadName, string leadNRIC, string leadMobile, string leadHome, string leadGender, string leadEmail, string teamCode, string dealerCode, string dealerName, string dbConnectionStr) {
            object[] results = this.Invoke("RetrieveLeadsByCriteria", new object[] {
                        leadName,
                        leadNRIC,
                        leadMobile,
                        leadHome,
                        leadGender,
                        leadEmail,
                        teamCode,
                        dealerCode,
                        dealerName,
                        dbConnectionStr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveLeadsByCriteriaAsync(string leadName, string leadNRIC, string leadMobile, string leadHome, string leadGender, string leadEmail, string teamCode, string dealerCode, string dealerName, string dbConnectionStr) {
            this.RetrieveLeadsByCriteriaAsync(leadName, leadNRIC, leadMobile, leadHome, leadGender, leadEmail, teamCode, dealerCode, dealerName, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void RetrieveLeadsByCriteriaAsync(string leadName, string leadNRIC, string leadMobile, string leadHome, string leadGender, string leadEmail, string teamCode, string dealerCode, string dealerName, string dbConnectionStr, object userState) {
            if ((this.RetrieveLeadsByCriteriaOperationCompleted == null)) {
                this.RetrieveLeadsByCriteriaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveLeadsByCriteriaOperationCompleted);
            }
            this.InvokeAsync("RetrieveLeadsByCriteria", new object[] {
                        leadName,
                        leadNRIC,
                        leadMobile,
                        leadHome,
                        leadGender,
                        leadEmail,
                        teamCode,
                        dealerCode,
                        dealerName,
                        dbConnectionStr}, this.RetrieveLeadsByCriteriaOperationCompleted, userState);
        }
        
        private void OnRetrieveLeadsByCriteriaOperationCompleted(object arg) {
            if ((this.RetrieveLeadsByCriteriaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveLeadsByCriteriaCompleted(this, new RetrieveLeadsByCriteriaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveMaxLeadsID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RetrieveMaxLeadsID(string dbConnectionStr) {
            object[] results = this.Invoke("RetrieveMaxLeadsID", new object[] {
                        dbConnectionStr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveMaxLeadsIDAsync(string dbConnectionStr) {
            this.RetrieveMaxLeadsIDAsync(dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void RetrieveMaxLeadsIDAsync(string dbConnectionStr, object userState) {
            if ((this.RetrieveMaxLeadsIDOperationCompleted == null)) {
                this.RetrieveMaxLeadsIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveMaxLeadsIDOperationCompleted);
            }
            this.InvokeAsync("RetrieveMaxLeadsID", new object[] {
                        dbConnectionStr}, this.RetrieveMaxLeadsIDOperationCompleted, userState);
        }
        
        private void OnRetrieveMaxLeadsIDOperationCompleted(object arg) {
            if ((this.RetrieveMaxLeadsIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveMaxLeadsIDCompleted(this, new RetrieveMaxLeadsIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckExistingLead", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CheckExistingLead(string LeadName, string LeadMobile, string LeadNRIC, string dbConnectionStr) {
            object[] results = this.Invoke("CheckExistingLead", new object[] {
                        LeadName,
                        LeadMobile,
                        LeadNRIC,
                        dbConnectionStr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CheckExistingLeadAsync(string LeadName, string LeadMobile, string LeadNRIC, string dbConnectionStr) {
            this.CheckExistingLeadAsync(LeadName, LeadMobile, LeadNRIC, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void CheckExistingLeadAsync(string LeadName, string LeadMobile, string LeadNRIC, string dbConnectionStr, object userState) {
            if ((this.CheckExistingLeadOperationCompleted == null)) {
                this.CheckExistingLeadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckExistingLeadOperationCompleted);
            }
            this.InvokeAsync("CheckExistingLead", new object[] {
                        LeadName,
                        LeadMobile,
                        LeadNRIC,
                        dbConnectionStr}, this.CheckExistingLeadOperationCompleted, userState);
        }
        
        private void OnCheckExistingLeadOperationCompleted(object arg) {
            if ((this.CheckExistingLeadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckExistingLeadCompleted(this, new CheckExistingLeadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveExistingLeadsInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RetrieveExistingLeadsInfo(string LeadName, string LeadNRIC, string dbConnectionStr) {
            object[] results = this.Invoke("RetrieveExistingLeadsInfo", new object[] {
                        LeadName,
                        LeadNRIC,
                        dbConnectionStr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveExistingLeadsInfoAsync(string LeadName, string LeadNRIC, string dbConnectionStr) {
            this.RetrieveExistingLeadsInfoAsync(LeadName, LeadNRIC, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void RetrieveExistingLeadsInfoAsync(string LeadName, string LeadNRIC, string dbConnectionStr, object userState) {
            if ((this.RetrieveExistingLeadsInfoOperationCompleted == null)) {
                this.RetrieveExistingLeadsInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveExistingLeadsInfoOperationCompleted);
            }
            this.InvokeAsync("RetrieveExistingLeadsInfo", new object[] {
                        LeadName,
                        LeadNRIC,
                        dbConnectionStr}, this.RetrieveExistingLeadsInfoOperationCompleted, userState);
        }
        
        private void OnRetrieveExistingLeadsInfoOperationCompleted(object arg) {
            if ((this.RetrieveExistingLeadsInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveExistingLeadsInfoCompleted(this, new RetrieveExistingLeadsInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void RetrieveCoreClientListCompletedEventHandler(object sender, RetrieveCoreClientListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveCoreClientListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveCoreClientListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void AddCoreClientCompletedEventHandler(object sender, AddCoreClientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCoreClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCoreClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void DeleteCoreClientCompletedEventHandler(object sender, DeleteCoreClientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteCoreClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteCoreClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void RetrievePerferListCompletedEventHandler(object sender, RetrievePerferListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrievePerferListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrievePerferListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void UpdatePreferListCompletedEventHandler(object sender, UpdatePreferListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePreferListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePreferListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void DeletePreferListCompletedEventHandler(object sender, DeletePreferListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeletePreferListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeletePreferListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void AddPreferenceCompletedEventHandler(object sender, AddPreferenceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPreferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPreferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void RetrieveAllDealerCompletedEventHandler(object sender, RetrieveAllDealerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveAllDealerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveAllDealerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void DeleteDealerCompletedEventHandler(object sender, DeleteDealerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteDealerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteDealerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void InsertDealerCompletedEventHandler(object sender, InsertDealerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertDealerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertDealerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void UpdateDealerCompletedEventHandler(object sender, UpdateDealerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateDealerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateDealerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void RetrieveDealerByCriteriaCompletedEventHandler(object sender, RetrieveDealerByCriteriaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveDealerByCriteriaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveDealerByCriteriaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void RetrieveCrossTeamDealerCompletedEventHandler(object sender, RetrieveCrossTeamDealerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveCrossTeamDealerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveCrossTeamDealerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void PrepareForCrossTeamSetupCompletedEventHandler(object sender, PrepareForCrossTeamSetupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrepareForCrossTeamSetupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrepareForCrossTeamSetupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void InsertCrossTeamDealerCompletedEventHandler(object sender, InsertCrossTeamDealerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertCrossTeamDealerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertCrossTeamDealerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void DeleteCrossTeamDealerCompletedEventHandler(object sender, DeleteCrossTeamDealerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteCrossTeamDealerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteCrossTeamDealerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void UpdateCrossTeamDealerCompletedEventHandler(object sender, UpdateCrossTeamDealerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateCrossTeamDealerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateCrossTeamDealerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void RetrieveClientShortKeyCompletedEventHandler(object sender, RetrieveClientShortKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveClientShortKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveClientShortKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void InsertClientShortKeyCompletedEventHandler(object sender, InsertClientShortKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertClientShortKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertClientShortKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void DeleteClientShortKeyCompletedEventHandler(object sender, DeleteClientShortKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteClientShortKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteClientShortKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void RetrieveAllLeadsCompletedEventHandler(object sender, RetrieveAllLeadsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveAllLeadsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveAllLeadsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void DeleteLeadsCompletedEventHandler(object sender, DeleteLeadsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteLeadsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteLeadsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void InsertLeadsCompletedEventHandler(object sender, InsertLeadsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertLeadsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertLeadsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void MoveToLeadArchiveCompletedEventHandler(object sender, MoveToLeadArchiveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveToLeadArchiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveToLeadArchiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void LeadsDataSyncCompletedEventHandler(object sender, LeadsDataSyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LeadsDataSyncCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LeadsDataSyncCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void UpdateLeadsCompletedEventHandler(object sender, UpdateLeadsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateLeadsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateLeadsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void RetrieveLeadsByCriteriaCompletedEventHandler(object sender, RetrieveLeadsByCriteriaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveLeadsByCriteriaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveLeadsByCriteriaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void RetrieveMaxLeadsIDCompletedEventHandler(object sender, RetrieveMaxLeadsIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveMaxLeadsIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveMaxLeadsIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void CheckExistingLeadCompletedEventHandler(object sender, CheckExistingLeadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckExistingLeadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckExistingLeadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void RetrieveExistingLeadsInfoCompletedEventHandler(object sender, RetrieveExistingLeadsInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveExistingLeadsInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveExistingLeadsInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591