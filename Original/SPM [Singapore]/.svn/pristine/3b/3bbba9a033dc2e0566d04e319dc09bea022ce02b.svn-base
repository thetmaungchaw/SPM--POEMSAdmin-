//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.5448.
// 
#pragma warning disable 1591

namespace SPMWebApp.LeadsContactManagementService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="LeadsContactManagementSoap", Namespace="http://tempuri.org/")]
    public partial class LeadsContactManagement : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback PrepareForContactEntryOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveUnContactedAssignmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback getContactHistoryByLeadIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveContactHistoryByCriteriaOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertLeadsContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateLeadsContactFollowupOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateLeadsContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteLeadsContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrepareForContactHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveContactAnalysisOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveCallReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveCallReportDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveLeadsAnalysisOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrepareForLeadsAnalysisOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveContactEntryForTodayOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveFollowUpLeadOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public LeadsContactManagement() {
            this.Url = global::SPMWebApp.Properties.Settings.Default.SPMWebApp_LeadsContactManagementService_LeadsContactManagement;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event PrepareForContactEntryCompletedEventHandler PrepareForContactEntryCompleted;
        
        /// <remarks/>
        public event RetrieveUnContactedAssignmentCompletedEventHandler RetrieveUnContactedAssignmentCompleted;
        
        /// <remarks/>
        public event getContactHistoryByLeadIdCompletedEventHandler getContactHistoryByLeadIdCompleted;
        
        /// <remarks/>
        public event RetrieveContactHistoryByCriteriaCompletedEventHandler RetrieveContactHistoryByCriteriaCompleted;
        
        /// <remarks/>
        public event InsertLeadsContactCompletedEventHandler InsertLeadsContactCompleted;
        
        /// <remarks/>
        public event UpdateLeadsContactFollowupCompletedEventHandler UpdateLeadsContactFollowupCompleted;
        
        /// <remarks/>
        public event UpdateLeadsContactCompletedEventHandler UpdateLeadsContactCompleted;
        
        /// <remarks/>
        public event DeleteLeadsContactCompletedEventHandler DeleteLeadsContactCompleted;
        
        /// <remarks/>
        public event PrepareForContactHistoryCompletedEventHandler PrepareForContactHistoryCompleted;
        
        /// <remarks/>
        public event RetrieveContactAnalysisCompletedEventHandler RetrieveContactAnalysisCompleted;
        
        /// <remarks/>
        public event RetrieveCallReportCompletedEventHandler RetrieveCallReportCompleted;
        
        /// <remarks/>
        public event RetrieveCallReportDetailCompletedEventHandler RetrieveCallReportDetailCompleted;
        
        /// <remarks/>
        public event RetrieveLeadsAnalysisCompletedEventHandler RetrieveLeadsAnalysisCompleted;
        
        /// <remarks/>
        public event PrepareForLeadsAnalysisCompletedEventHandler PrepareForLeadsAnalysisCompleted;
        
        /// <remarks/>
        public event RetrieveContactEntryForTodayCompletedEventHandler RetrieveContactEntryForTodayCompleted;
        
        /// <remarks/>
        public event RetrieveFollowUpLeadCompletedEventHandler RetrieveFollowUpLeadCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PrepareForContactEntry", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PrepareForContactEntry(string userRole, string userId, string dbConnectionStr) {
            object[] results = this.Invoke("PrepareForContactEntry", new object[] {
                        userRole,
                        userId,
                        dbConnectionStr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PrepareForContactEntryAsync(string userRole, string userId, string dbConnectionStr) {
            this.PrepareForContactEntryAsync(userRole, userId, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void PrepareForContactEntryAsync(string userRole, string userId, string dbConnectionStr, object userState) {
            if ((this.PrepareForContactEntryOperationCompleted == null)) {
                this.PrepareForContactEntryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrepareForContactEntryOperationCompleted);
            }
            this.InvokeAsync("PrepareForContactEntry", new object[] {
                        userRole,
                        userId,
                        dbConnectionStr}, this.PrepareForContactEntryOperationCompleted, userState);
        }
        
        private void OnPrepareForContactEntryOperationCompleted(object arg) {
            if ((this.PrepareForContactEntryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrepareForContactEntryCompleted(this, new PrepareForContactEntryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveUnContactedAssignment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RetrieveUnContactedAssignment(string dealerCode, string dbConnectionStr) {
            object[] results = this.Invoke("RetrieveUnContactedAssignment", new object[] {
                        dealerCode,
                        dbConnectionStr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveUnContactedAssignmentAsync(string dealerCode, string dbConnectionStr) {
            this.RetrieveUnContactedAssignmentAsync(dealerCode, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void RetrieveUnContactedAssignmentAsync(string dealerCode, string dbConnectionStr, object userState) {
            if ((this.RetrieveUnContactedAssignmentOperationCompleted == null)) {
                this.RetrieveUnContactedAssignmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveUnContactedAssignmentOperationCompleted);
            }
            this.InvokeAsync("RetrieveUnContactedAssignment", new object[] {
                        dealerCode,
                        dbConnectionStr}, this.RetrieveUnContactedAssignmentOperationCompleted, userState);
        }
        
        private void OnRetrieveUnContactedAssignmentOperationCompleted(object arg) {
            if ((this.RetrieveUnContactedAssignmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveUnContactedAssignmentCompleted(this, new RetrieveUnContactedAssignmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getContactHistoryByLeadId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getContactHistoryByLeadId(string leadId, string dbConnectionStr) {
            object[] results = this.Invoke("getContactHistoryByLeadId", new object[] {
                        leadId,
                        dbConnectionStr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getContactHistoryByLeadIdAsync(string leadId, string dbConnectionStr) {
            this.getContactHistoryByLeadIdAsync(leadId, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void getContactHistoryByLeadIdAsync(string leadId, string dbConnectionStr, object userState) {
            if ((this.getContactHistoryByLeadIdOperationCompleted == null)) {
                this.getContactHistoryByLeadIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetContactHistoryByLeadIdOperationCompleted);
            }
            this.InvokeAsync("getContactHistoryByLeadId", new object[] {
                        leadId,
                        dbConnectionStr}, this.getContactHistoryByLeadIdOperationCompleted, userState);
        }
        
        private void OngetContactHistoryByLeadIdOperationCompleted(object arg) {
            if ((this.getContactHistoryByLeadIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getContactHistoryByLeadIdCompleted(this, new getContactHistoryByLeadIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveContactHistoryByCriteria", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RetrieveContactHistoryByCriteria(string accountNo, string dealerCode, string dateFrom, string dateTo, string rank, string preference, string content, string teamCode, string dbConnectionStr) {
            object[] results = this.Invoke("RetrieveContactHistoryByCriteria", new object[] {
                        accountNo,
                        dealerCode,
                        dateFrom,
                        dateTo,
                        rank,
                        preference,
                        content,
                        teamCode,
                        dbConnectionStr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveContactHistoryByCriteriaAsync(string accountNo, string dealerCode, string dateFrom, string dateTo, string rank, string preference, string content, string teamCode, string dbConnectionStr) {
            this.RetrieveContactHistoryByCriteriaAsync(accountNo, dealerCode, dateFrom, dateTo, rank, preference, content, teamCode, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void RetrieveContactHistoryByCriteriaAsync(string accountNo, string dealerCode, string dateFrom, string dateTo, string rank, string preference, string content, string teamCode, string dbConnectionStr, object userState) {
            if ((this.RetrieveContactHistoryByCriteriaOperationCompleted == null)) {
                this.RetrieveContactHistoryByCriteriaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveContactHistoryByCriteriaOperationCompleted);
            }
            this.InvokeAsync("RetrieveContactHistoryByCriteria", new object[] {
                        accountNo,
                        dealerCode,
                        dateFrom,
                        dateTo,
                        rank,
                        preference,
                        content,
                        teamCode,
                        dbConnectionStr}, this.RetrieveContactHistoryByCriteriaOperationCompleted, userState);
        }
        
        private void OnRetrieveContactHistoryByCriteriaOperationCompleted(object arg) {
            if ((this.RetrieveContactHistoryByCriteriaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveContactHistoryByCriteriaCompleted(this, new RetrieveContactHistoryByCriteriaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertLeadsContact", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet InsertLeadsContact(string dealerCode, string userId, string leadId, string sex, string MobileNo, string HomeNo, string content, string needFollowUp, string followupDate, string preferMode, string projId, string lastLeadId, string lastLeadName, string dbConnectionStr) {
            object[] results = this.Invoke("InsertLeadsContact", new object[] {
                        dealerCode,
                        userId,
                        leadId,
                        sex,
                        MobileNo,
                        HomeNo,
                        content,
                        needFollowUp,
                        followupDate,
                        preferMode,
                        projId,
                        lastLeadId,
                        lastLeadName,
                        dbConnectionStr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void InsertLeadsContactAsync(string dealerCode, string userId, string leadId, string sex, string MobileNo, string HomeNo, string content, string needFollowUp, string followupDate, string preferMode, string projId, string lastLeadId, string lastLeadName, string dbConnectionStr) {
            this.InsertLeadsContactAsync(dealerCode, userId, leadId, sex, MobileNo, HomeNo, content, needFollowUp, followupDate, preferMode, projId, lastLeadId, lastLeadName, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void InsertLeadsContactAsync(string dealerCode, string userId, string leadId, string sex, string MobileNo, string HomeNo, string content, string needFollowUp, string followupDate, string preferMode, string projId, string lastLeadId, string lastLeadName, string dbConnectionStr, object userState) {
            if ((this.InsertLeadsContactOperationCompleted == null)) {
                this.InsertLeadsContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertLeadsContactOperationCompleted);
            }
            this.InvokeAsync("InsertLeadsContact", new object[] {
                        dealerCode,
                        userId,
                        leadId,
                        sex,
                        MobileNo,
                        HomeNo,
                        content,
                        needFollowUp,
                        followupDate,
                        preferMode,
                        projId,
                        lastLeadId,
                        lastLeadName,
                        dbConnectionStr}, this.InsertLeadsContactOperationCompleted, userState);
        }
        
        private void OnInsertLeadsContactOperationCompleted(object arg) {
            if ((this.InsertLeadsContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertLeadsContactCompleted(this, new InsertLeadsContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateLeadsContactFollowup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateLeadsContactFollowup(string dealerCode, string userId, string leadId, string sex, string MobileNo, string HomeNo, string content, string needFollowUp, string preferMode, string projId, string lastLeadId, string lastLeadName, string recId, string dbConnectionStr) {
            object[] results = this.Invoke("UpdateLeadsContactFollowup", new object[] {
                        dealerCode,
                        userId,
                        leadId,
                        sex,
                        MobileNo,
                        HomeNo,
                        content,
                        needFollowUp,
                        preferMode,
                        projId,
                        lastLeadId,
                        lastLeadName,
                        recId,
                        dbConnectionStr});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateLeadsContactFollowupAsync(string dealerCode, string userId, string leadId, string sex, string MobileNo, string HomeNo, string content, string needFollowUp, string preferMode, string projId, string lastLeadId, string lastLeadName, string recId, string dbConnectionStr) {
            this.UpdateLeadsContactFollowupAsync(dealerCode, userId, leadId, sex, MobileNo, HomeNo, content, needFollowUp, preferMode, projId, lastLeadId, lastLeadName, recId, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void UpdateLeadsContactFollowupAsync(string dealerCode, string userId, string leadId, string sex, string MobileNo, string HomeNo, string content, string needFollowUp, string preferMode, string projId, string lastLeadId, string lastLeadName, string recId, string dbConnectionStr, object userState) {
            if ((this.UpdateLeadsContactFollowupOperationCompleted == null)) {
                this.UpdateLeadsContactFollowupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateLeadsContactFollowupOperationCompleted);
            }
            this.InvokeAsync("UpdateLeadsContactFollowup", new object[] {
                        dealerCode,
                        userId,
                        leadId,
                        sex,
                        MobileNo,
                        HomeNo,
                        content,
                        needFollowUp,
                        preferMode,
                        projId,
                        lastLeadId,
                        lastLeadName,
                        recId,
                        dbConnectionStr}, this.UpdateLeadsContactFollowupOperationCompleted, userState);
        }
        
        private void OnUpdateLeadsContactFollowupOperationCompleted(object arg) {
            if ((this.UpdateLeadsContactFollowupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateLeadsContactFollowupCompleted(this, new UpdateLeadsContactFollowupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateLeadsContact", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] UpdateLeadsContact(string dealerCode, string userId, string leadId, string sex, string MobileNo, string HomeNo, string content, string needFollowup, string followupDate, string preferMode, string projId, string recId, string dbConnectionStr) {
            object[] results = this.Invoke("UpdateLeadsContact", new object[] {
                        dealerCode,
                        userId,
                        leadId,
                        sex,
                        MobileNo,
                        HomeNo,
                        content,
                        needFollowup,
                        followupDate,
                        preferMode,
                        projId,
                        recId,
                        dbConnectionStr});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void UpdateLeadsContactAsync(string dealerCode, string userId, string leadId, string sex, string MobileNo, string HomeNo, string content, string needFollowup, string followupDate, string preferMode, string projId, string recId, string dbConnectionStr) {
            this.UpdateLeadsContactAsync(dealerCode, userId, leadId, sex, MobileNo, HomeNo, content, needFollowup, followupDate, preferMode, projId, recId, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void UpdateLeadsContactAsync(string dealerCode, string userId, string leadId, string sex, string MobileNo, string HomeNo, string content, string needFollowup, string followupDate, string preferMode, string projId, string recId, string dbConnectionStr, object userState) {
            if ((this.UpdateLeadsContactOperationCompleted == null)) {
                this.UpdateLeadsContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateLeadsContactOperationCompleted);
            }
            this.InvokeAsync("UpdateLeadsContact", new object[] {
                        dealerCode,
                        userId,
                        leadId,
                        sex,
                        MobileNo,
                        HomeNo,
                        content,
                        needFollowup,
                        followupDate,
                        preferMode,
                        projId,
                        recId,
                        dbConnectionStr}, this.UpdateLeadsContactOperationCompleted, userState);
        }
        
        private void OnUpdateLeadsContactOperationCompleted(object arg) {
            if ((this.UpdateLeadsContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateLeadsContactCompleted(this, new UpdateLeadsContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteLeadsContact", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet DeleteLeadsContact(string recId, string dealerCode, string dbConnectionStr) {
            object[] results = this.Invoke("DeleteLeadsContact", new object[] {
                        recId,
                        dealerCode,
                        dbConnectionStr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteLeadsContactAsync(string recId, string dealerCode, string dbConnectionStr) {
            this.DeleteLeadsContactAsync(recId, dealerCode, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void DeleteLeadsContactAsync(string recId, string dealerCode, string dbConnectionStr, object userState) {
            if ((this.DeleteLeadsContactOperationCompleted == null)) {
                this.DeleteLeadsContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteLeadsContactOperationCompleted);
            }
            this.InvokeAsync("DeleteLeadsContact", new object[] {
                        recId,
                        dealerCode,
                        dbConnectionStr}, this.DeleteLeadsContactOperationCompleted, userState);
        }
        
        private void OnDeleteLeadsContactOperationCompleted(object arg) {
            if ((this.DeleteLeadsContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteLeadsContactCompleted(this, new DeleteLeadsContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PrepareForContactHistory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PrepareForContactHistory(string UserID, string dbConnectionStr) {
            object[] results = this.Invoke("PrepareForContactHistory", new object[] {
                        UserID,
                        dbConnectionStr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PrepareForContactHistoryAsync(string UserID, string dbConnectionStr) {
            this.PrepareForContactHistoryAsync(UserID, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void PrepareForContactHistoryAsync(string UserID, string dbConnectionStr, object userState) {
            if ((this.PrepareForContactHistoryOperationCompleted == null)) {
                this.PrepareForContactHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrepareForContactHistoryOperationCompleted);
            }
            this.InvokeAsync("PrepareForContactHistory", new object[] {
                        UserID,
                        dbConnectionStr}, this.PrepareForContactHistoryOperationCompleted, userState);
        }
        
        private void OnPrepareForContactHistoryOperationCompleted(object arg) {
            if ((this.PrepareForContactHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrepareForContactHistoryCompleted(this, new PrepareForContactHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveContactAnalysis", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RetrieveContactAnalysis(string dealerCode, string accountNo, string dateFrom, string dateTo, string dbConnectionStr) {
            object[] results = this.Invoke("RetrieveContactAnalysis", new object[] {
                        dealerCode,
                        accountNo,
                        dateFrom,
                        dateTo,
                        dbConnectionStr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveContactAnalysisAsync(string dealerCode, string accountNo, string dateFrom, string dateTo, string dbConnectionStr) {
            this.RetrieveContactAnalysisAsync(dealerCode, accountNo, dateFrom, dateTo, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void RetrieveContactAnalysisAsync(string dealerCode, string accountNo, string dateFrom, string dateTo, string dbConnectionStr, object userState) {
            if ((this.RetrieveContactAnalysisOperationCompleted == null)) {
                this.RetrieveContactAnalysisOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveContactAnalysisOperationCompleted);
            }
            this.InvokeAsync("RetrieveContactAnalysis", new object[] {
                        dealerCode,
                        accountNo,
                        dateFrom,
                        dateTo,
                        dbConnectionStr}, this.RetrieveContactAnalysisOperationCompleted, userState);
        }
        
        private void OnRetrieveContactAnalysisOperationCompleted(object arg) {
            if ((this.RetrieveContactAnalysisCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveContactAnalysisCompleted(this, new RetrieveContactAnalysisCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveCallReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RetrieveCallReport(string assignDate, string dbConnectionStr) {
            object[] results = this.Invoke("RetrieveCallReport", new object[] {
                        assignDate,
                        dbConnectionStr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveCallReportAsync(string assignDate, string dbConnectionStr) {
            this.RetrieveCallReportAsync(assignDate, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void RetrieveCallReportAsync(string assignDate, string dbConnectionStr, object userState) {
            if ((this.RetrieveCallReportOperationCompleted == null)) {
                this.RetrieveCallReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveCallReportOperationCompleted);
            }
            this.InvokeAsync("RetrieveCallReport", new object[] {
                        assignDate,
                        dbConnectionStr}, this.RetrieveCallReportOperationCompleted, userState);
        }
        
        private void OnRetrieveCallReportOperationCompleted(object arg) {
            if ((this.RetrieveCallReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveCallReportCompleted(this, new RetrieveCallReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveCallReportDetail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RetrieveCallReportDetail(string assignDate, string dealerCode, string dbConnectionStr) {
            object[] results = this.Invoke("RetrieveCallReportDetail", new object[] {
                        assignDate,
                        dealerCode,
                        dbConnectionStr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveCallReportDetailAsync(string assignDate, string dealerCode, string dbConnectionStr) {
            this.RetrieveCallReportDetailAsync(assignDate, dealerCode, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void RetrieveCallReportDetailAsync(string assignDate, string dealerCode, string dbConnectionStr, object userState) {
            if ((this.RetrieveCallReportDetailOperationCompleted == null)) {
                this.RetrieveCallReportDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveCallReportDetailOperationCompleted);
            }
            this.InvokeAsync("RetrieveCallReportDetail", new object[] {
                        assignDate,
                        dealerCode,
                        dbConnectionStr}, this.RetrieveCallReportDetailOperationCompleted, userState);
        }
        
        private void OnRetrieveCallReportDetailOperationCompleted(object arg) {
            if ((this.RetrieveCallReportDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveCallReportDetailCompleted(this, new RetrieveCallReportDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveLeadsAnalysis", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RetrieveLeadsAnalysis(string teamCode, string dealerCode, string accountCreateDate, string lastTradeDate, string dbConnectionStr) {
            object[] results = this.Invoke("RetrieveLeadsAnalysis", new object[] {
                        teamCode,
                        dealerCode,
                        accountCreateDate,
                        lastTradeDate,
                        dbConnectionStr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveLeadsAnalysisAsync(string teamCode, string dealerCode, string accountCreateDate, string lastTradeDate, string dbConnectionStr) {
            this.RetrieveLeadsAnalysisAsync(teamCode, dealerCode, accountCreateDate, lastTradeDate, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void RetrieveLeadsAnalysisAsync(string teamCode, string dealerCode, string accountCreateDate, string lastTradeDate, string dbConnectionStr, object userState) {
            if ((this.RetrieveLeadsAnalysisOperationCompleted == null)) {
                this.RetrieveLeadsAnalysisOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveLeadsAnalysisOperationCompleted);
            }
            this.InvokeAsync("RetrieveLeadsAnalysis", new object[] {
                        teamCode,
                        dealerCode,
                        accountCreateDate,
                        lastTradeDate,
                        dbConnectionStr}, this.RetrieveLeadsAnalysisOperationCompleted, userState);
        }
        
        private void OnRetrieveLeadsAnalysisOperationCompleted(object arg) {
            if ((this.RetrieveLeadsAnalysisCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveLeadsAnalysisCompleted(this, new RetrieveLeadsAnalysisCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PrepareForLeadsAnalysis", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet PrepareForLeadsAnalysis(string dbConnectionStr) {
            object[] results = this.Invoke("PrepareForLeadsAnalysis", new object[] {
                        dbConnectionStr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void PrepareForLeadsAnalysisAsync(string dbConnectionStr) {
            this.PrepareForLeadsAnalysisAsync(dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void PrepareForLeadsAnalysisAsync(string dbConnectionStr, object userState) {
            if ((this.PrepareForLeadsAnalysisOperationCompleted == null)) {
                this.PrepareForLeadsAnalysisOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrepareForLeadsAnalysisOperationCompleted);
            }
            this.InvokeAsync("PrepareForLeadsAnalysis", new object[] {
                        dbConnectionStr}, this.PrepareForLeadsAnalysisOperationCompleted, userState);
        }
        
        private void OnPrepareForLeadsAnalysisOperationCompleted(object arg) {
            if ((this.PrepareForLeadsAnalysisCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrepareForLeadsAnalysisCompleted(this, new PrepareForLeadsAnalysisCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveContactEntryForToday", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RetrieveContactEntryForToday(string dealerCode, string dbConnectionStr) {
            object[] results = this.Invoke("RetrieveContactEntryForToday", new object[] {
                        dealerCode,
                        dbConnectionStr});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveContactEntryForTodayAsync(string dealerCode, string dbConnectionStr) {
            this.RetrieveContactEntryForTodayAsync(dealerCode, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void RetrieveContactEntryForTodayAsync(string dealerCode, string dbConnectionStr, object userState) {
            if ((this.RetrieveContactEntryForTodayOperationCompleted == null)) {
                this.RetrieveContactEntryForTodayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveContactEntryForTodayOperationCompleted);
            }
            this.InvokeAsync("RetrieveContactEntryForToday", new object[] {
                        dealerCode,
                        dbConnectionStr}, this.RetrieveContactEntryForTodayOperationCompleted, userState);
        }
        
        private void OnRetrieveContactEntryForTodayOperationCompleted(object arg) {
            if ((this.RetrieveContactEntryForTodayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveContactEntryForTodayCompleted(this, new RetrieveContactEntryForTodayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RetrieveFollowUpLead", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable RetrieveFollowUpLead(string AECode, string dbConnectionStr) {
            object[] results = this.Invoke("RetrieveFollowUpLead", new object[] {
                        AECode,
                        dbConnectionStr});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveFollowUpLeadAsync(string AECode, string dbConnectionStr) {
            this.RetrieveFollowUpLeadAsync(AECode, dbConnectionStr, null);
        }
        
        /// <remarks/>
        public void RetrieveFollowUpLeadAsync(string AECode, string dbConnectionStr, object userState) {
            if ((this.RetrieveFollowUpLeadOperationCompleted == null)) {
                this.RetrieveFollowUpLeadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveFollowUpLeadOperationCompleted);
            }
            this.InvokeAsync("RetrieveFollowUpLead", new object[] {
                        AECode,
                        dbConnectionStr}, this.RetrieveFollowUpLeadOperationCompleted, userState);
        }
        
        private void OnRetrieveFollowUpLeadOperationCompleted(object arg) {
            if ((this.RetrieveFollowUpLeadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveFollowUpLeadCompleted(this, new RetrieveFollowUpLeadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void PrepareForContactEntryCompletedEventHandler(object sender, PrepareForContactEntryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrepareForContactEntryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrepareForContactEntryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void RetrieveUnContactedAssignmentCompletedEventHandler(object sender, RetrieveUnContactedAssignmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveUnContactedAssignmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveUnContactedAssignmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void getContactHistoryByLeadIdCompletedEventHandler(object sender, getContactHistoryByLeadIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getContactHistoryByLeadIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getContactHistoryByLeadIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void RetrieveContactHistoryByCriteriaCompletedEventHandler(object sender, RetrieveContactHistoryByCriteriaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveContactHistoryByCriteriaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveContactHistoryByCriteriaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void InsertLeadsContactCompletedEventHandler(object sender, InsertLeadsContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertLeadsContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertLeadsContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void UpdateLeadsContactFollowupCompletedEventHandler(object sender, UpdateLeadsContactFollowupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateLeadsContactFollowupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateLeadsContactFollowupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void UpdateLeadsContactCompletedEventHandler(object sender, UpdateLeadsContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateLeadsContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateLeadsContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void DeleteLeadsContactCompletedEventHandler(object sender, DeleteLeadsContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteLeadsContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteLeadsContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void PrepareForContactHistoryCompletedEventHandler(object sender, PrepareForContactHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrepareForContactHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrepareForContactHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void RetrieveContactAnalysisCompletedEventHandler(object sender, RetrieveContactAnalysisCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveContactAnalysisCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveContactAnalysisCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void RetrieveCallReportCompletedEventHandler(object sender, RetrieveCallReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveCallReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveCallReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void RetrieveCallReportDetailCompletedEventHandler(object sender, RetrieveCallReportDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveCallReportDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveCallReportDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void RetrieveLeadsAnalysisCompletedEventHandler(object sender, RetrieveLeadsAnalysisCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveLeadsAnalysisCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveLeadsAnalysisCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void PrepareForLeadsAnalysisCompletedEventHandler(object sender, PrepareForLeadsAnalysisCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrepareForLeadsAnalysisCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrepareForLeadsAnalysisCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void RetrieveContactEntryForTodayCompletedEventHandler(object sender, RetrieveContactEntryForTodayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveContactEntryForTodayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveContactEntryForTodayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void RetrieveFollowUpLeadCompletedEventHandler(object sender, RetrieveFollowUpLeadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveFollowUpLeadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveFollowUpLeadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591